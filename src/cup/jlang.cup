import java_cup.runtime.*;
import tree.*;
import java.util.ArrayList;
import java.util.function.Consumer;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import util.LocationRange;
import util.Errors;

parser code {:
	public boolean userHasError;
	public boolean userHasFatalError;
	public ErrorLocationMessageCallback userErrorCallback;

	public parser(Scanner s, SymbolFactory symfac, ErrorLocationMessageCallback uec) {
		super(s, symfac);
		this.userHasError = false;
		this.userHasFatalError = false;
		this.userErrorCallback = uec;
	}
	public void report_error(String message, Object info)
    {
	  if (info instanceof ComplexSymbol) {
         final Location left = ((ComplexSymbol)info).getLeft();
         final Location right = ((ComplexSymbol)info).getRight();
		 final String tmp_name = ((ComplexSymbol) info).getName();
		 System.err.println("Error: " + message + ' ' + (tmp_name.isEmpty() ? "" : tmp_name + ' ') + "( " + Errors.getErrorLocationString(left, right) + " ) :");
		 if (userErrorCallback != null) userErrorCallback.apply(left.getLine(), left.getColumn(), right.getLine(), right.getColumn());
      } else if (info instanceof Symbol)
         System.err.println("Error: " + message + ' ' + ((Symbol)info).toString());
      else
         System.err.println("Error: " + message + ' ' + cur_token.toString());
      userHasError = true;
    }
	public void report_fatal_error(String message, Object info)
    {
	  System.err.println("Parse aborted due to above error.");
	  userHasError = true;
	  userHasFatalError = true;
    }
:};



// Keywords
terminal NULL;
terminal TRUE;
terminal FALSE;
terminal CLASS;
terminal THIS;
terminal NEW;
terminal RETURN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal READLN;
terminal PRINTLN;

terminal INT;
terminal BOOL;
terminal STRING;
terminal VOID;

terminal java.lang.String IDENTIFIER;
terminal java.lang.String CLASSNAME;

// Literals
terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.String STRING_LITERAL;

// Operators
terminal ASSIGN;
terminal EQ;
terminal NE;
terminal LT;
terminal LE;
terminal GT;
terminal GE;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal DOT;
terminal COMMA;
terminal NEGATION;
terminal CONJUNCTION;
terminal DISJUNCTION;
terminal LPAREN;
terminal RPAREN;
terminal LCURLY;
terminal RCURLY;
terminal UMINUS;

// Semicolon
terminal SEMI;


// Main program
non terminal Program program;


non terminal ClassDecl main_class;
non terminal ArrayList<ClassDecl> class_decls;
non terminal ClassDecl class_decl;
non terminal ArrayList<VarDecl> fmllist;
non terminal ArrayList<VarDecl> fmlrest;
non terminal ArrayList<VarDecl> var_decls;
non terminal VarDecl var_decl_without_semi;
non terminal ArrayList<ClassItem> any_decls;
non terminal Method md_decl;
non terminal ArrayList<Stmt> stmts_nonzero;
non terminal ArrayList<Stmt> stmts;
non terminal Stmt stmt;
non terminal Expr expr;
non terminal ArrayList<Expr> expr_list;
non terminal ArrayList<Expr> expr_rest;
non terminal String typename;

precedence left DISJUNCTION;
precedence left CONJUNCTION;
precedence left EQ, NE, LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right UMINUS, NEGATION;
precedence right NEW;
precedence left DOT, LPAREN, RPAREN; // to make function calls work properly

start with program;

program ::= main_class:m class_decls:c {: c.add(0, m); RESULT = new Program(new LocationRange(mxleft, cxright), c); :}
	;

main_class ::= CLASS:c CLASSNAME:n LCURLY VOID:v IDENTIFIER:exp_main LPAREN fmllist:sig RPAREN:rp LCURLY var_decls:vs stmts_nonzero:ss RCURLY:rc2 RCURLY:rc
	{:
		if (!exp_main.equals("main")) {
			throw new Exception("Main class should have main function only");
		}
		RESULT = ClassDecl.makeMainClass(new LocationRange(cxleft, rcxright), new LocationRange(cxleft, nxright), new LocationRange(vxleft, rc2xright), new LocationRange(vxleft, rpxright), new LocationRange(vxleft, vxright), new LocationRange(exp_mainxleft, exp_mainxright), n, sig, vs, ss);
	:}
	;

class_decls ::= class_decls:arr class_decl:c  {: arr.add(c); RESULT = arr; :}
	| class_decls:arr error  {: RESULT = arr; :}
	|  {: RESULT = new ArrayList<ClassDecl>(); :}
	;

class_decl ::= CLASS:c CLASSNAME:n LCURLY any_decls:as RCURLY:rc {: RESULT = new ClassDecl(new LocationRange(cxleft, rcxright), new LocationRange(cxleft, nxright), n, as); :}
	;

fmllist ::= fmlrest:l typename:c IDENTIFIER:i {: l.add(new VarDecl(new LocationRange(cxleft, ixright), new LocationRange(cxleft, cxright), new LocationRange(ixleft, ixright), c, i)); RESULT = l; :}
	|  {: RESULT = new ArrayList<VarDecl>(); :}
	;

fmlrest ::= fmlrest:l typename:c IDENTIFIER:i COMMA {: l.add(new VarDecl(new LocationRange(cxleft, ixright), new LocationRange(cxleft, cxright), new LocationRange(ixleft, ixright), c, i)); RESULT = l; :}
	|  {: RESULT = new ArrayList<VarDecl>(); :}
	;

typename ::= CLASSNAME:n {: RESULT = n; :}
	| INT {: RESULT = "Int"; :}
	| BOOL {: RESULT = "Bool"; :}
	| STRING {: RESULT = "String"; :}
	| VOID {: RESULT = "Void"; :}
	;

any_decls ::= any_decls:a var_decl_without_semi:v SEMI {: a.add(v); RESULT = a; :}
	| any_decls:a md_decl:m {: a.add(m); RESULT = a; :}
	| any_decls:a error {: RESULT = a; :}
	|  {: RESULT = new ArrayList<ClassItem>(); :}
	;

var_decls ::= var_decls:l var_decl_without_semi:v SEMI {: l.add(v); RESULT = l; :}
	|  {: RESULT = new ArrayList<VarDecl>(); :}
	;

var_decl_without_semi ::= typename:c IDENTIFIER:i {: RESULT = new VarDecl(new LocationRange(cxleft, ixright), new LocationRange(cxleft, cxright), new LocationRange(ixleft, ixright), c, i); :}
	;

md_decl ::= var_decl_without_semi:v LPAREN fmllist:sig RPAREN:rp LCURLY var_decls:vs stmts_nonzero:ss RCURLY:rc
	{:
		RESULT = new Method(new LocationRange(vxleft, rcxright), new LocationRange(vxleft, rpxright), v.getTypeRange(), v.getNameRange(), v.getType(), v.getName(), sig, vs, ss);
	:}
	;

stmts_nonzero ::= stmts:ss stmt:s {: ss.add(s); RESULT = ss; :}
	;
	
stmts ::= stmts_nonzero:ss {: RESULT = ss; :}
	|  {: RESULT = new ArrayList<Stmt>(); :}
	;
	
stmt ::= IF:i LPAREN expr:cond RPAREN LCURLY stmts_nonzero:true_stmts RCURLY ELSE LCURLY stmts_nonzero:false_stmts RCURLY:r {: RESULT = new IfStmt(new LocationRange(ixleft, rxright), cond, true_stmts, false_stmts); :}
	| WHILE:w LPAREN expr:cond RPAREN LCURLY stmts:ss RCURLY:r {: RESULT = new WhileStmt(new LocationRange(wxleft, rxright), cond, ss); :}
	| READLN:r LPAREN IDENTIFIER:id RPAREN SEMI:sm {: RESULT = new ReadStmt(new LocationRange(rxleft, smxright), new LocationRange(idxleft, idxright), id); :}
	| PRINTLN:p LPAREN expr:e RPAREN SEMI:sm {: RESULT = new PrintStmt(new LocationRange(pxleft, smxright), e); :}
	| IDENTIFIER:id ASSIGN expr:e SEMI:sm {: RESULT = new AssignStmt(new LocationRange(idxleft, smxright), new LocationRange(idxleft, idxright), id, e); :}
	| expr:obj DOT IDENTIFIER:id ASSIGN expr:e SEMI:sm {: RESULT = new MemberAssignStmt(new LocationRange(objxleft, smxright), new LocationRange(idxleft, idxright), obj, id, e); :}
	| expr:e LPAREN expr_list:es RPAREN SEMI:sm {: RESULT = new CallStmt(new LocationRange(exleft, smxright), e, es); :}
	| RETURN:r expr:e SEMI:sm {: RESULT = new ReturnValueStmt(new LocationRange(rxleft, smxright), e); :}
	| RETURN:r SEMI:sm {: RESULT = new ReturnStmt(new LocationRange(rxleft, smxright)); :}
	| error:e SEMI:sm {: RESULT = new ErrorStmt(new LocationRange(exleft, smxright)); :}
	;
	
expr ::= expr:e1 DISJUNCTION expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.DISJUNCTION, e1, e2); :}
	| expr:e1 CONJUNCTION expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.CONJUNCTION, e1, e2); :}
	| NEGATION:n expr:e {: RESULT = new UnaryOperation(new LocationRange(nxleft, exright), UnOp.NEGATION, e); :}
	| expr:e1 EQ expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.EQ, e1, e2); :}
	| expr:e1 NE expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.NE, e1, e2); :}
	| expr:e1 LT expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.LT, e1, e2); :}
	| expr:e1 LE expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.LE, e1, e2); :}
	| expr:e1 GT expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.GT, e1, e2); :}
	| expr:e1 GE expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.GE, e1, e2); :}
	| expr:e1 PLUS expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.PLUS, e1, e2); :}
	| expr:e1 MINUS expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.MINUS, e1, e2); :}
	| expr:e1 TIMES expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.TIMES, e1, e2); :}
	| expr:e1 DIVIDE expr:e2 {: RESULT = new BinaryOperation(new LocationRange(e1xleft, e2xright), BinOp.DIVIDE, e1, e2); :}
	| MINUS:m expr:e {: RESULT = new UnaryOperation(new LocationRange(mxleft, exright), UnOp.MINUS, e); :} %prec UMINUS
	| LPAREN expr:e RPAREN {: RESULT = e; :}
	| TRUE:t {: RESULT = new Literal(new LocationRange(txleft, txright), Boolean.valueOf(true)); :}
	| FALSE:f {: RESULT = new Literal(new LocationRange(fxleft, fxright), Boolean.valueOf(false)); :}
	| NULL:n {: RESULT = new Literal(new LocationRange(nxleft, nxright), null); :}
	| INTEGER_LITERAL:i {: RESULT = new Literal(new LocationRange(ixleft, ixright), i); :}
	| STRING_LITERAL:s {: RESULT = new Literal(new LocationRange(sxleft, sxright), s); :}
	| expr:e DOT IDENTIFIER:i {: RESULT = new MemberAccess(new LocationRange(exleft, ixright), new LocationRange(ixleft, ixright), e, i); :}
	| expr:e LPAREN expr_list:es RPAREN:r {: RESULT = new CallExpr(new LocationRange(exleft, rxright), e, es); :}
	| NEW:n CLASSNAME:c LPAREN RPAREN:r {: RESULT = new Alloc(new LocationRange(nxleft, rxright), new LocationRange(cxleft, cxright), c); :}
	| THIS:i {: RESULT = new VarAccess(new LocationRange(ixleft, ixright), "this"); :}
	| IDENTIFIER:i {: RESULT = new VarAccess(new LocationRange(ixleft, ixright), i); :}
	| error:e {: RESULT = new ErrorExpr(new LocationRange(exleft, exright)); :}
	;

expr_list ::= expr_rest:es expr:e {: es.add(e); RESULT = es; :}
	|  {: RESULT = new ArrayList<Expr>(); :}
	;

expr_rest ::= expr_rest:es expr:e COMMA {: es.add(e); RESULT = es; :}
	|  {: RESULT = new ArrayList<Expr>(); :}
	;
